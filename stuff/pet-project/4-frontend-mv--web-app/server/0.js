exports.ids = [0];
exports.modules = {

/***/ "../node_modules/imask/dist/imask.js":
/*!*******************************************!*\
  !*** ../node_modules/imask/dist/imask.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () { 'use strict';\n\n  // 7.2.1 RequireObjectCoercible(argument)\n  var _defined = function (it) {\n    if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n    return it;\n  };\n\n  // 7.1.13 ToObject(argument)\n\n  var _toObject = function (it) {\n    return Object(_defined(it));\n  };\n\n  var hasOwnProperty = {}.hasOwnProperty;\n  var _has = function (it, key) {\n    return hasOwnProperty.call(it, key);\n  };\n\n  var toString = {}.toString;\n\n  var _cof = function (it) {\n    return toString.call(it).slice(8, -1);\n  };\n\n  // fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n  // eslint-disable-next-line no-prototype-builtins\n  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n    return _cof(it) == 'String' ? it.split('') : Object(it);\n  };\n\n  // to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\n  var _toIobject = function (it) {\n    return _iobject(_defined(it));\n  };\n\n  // 7.1.4 ToInteger\n  var ceil = Math.ceil;\n  var floor = Math.floor;\n  var _toInteger = function (it) {\n    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n  };\n\n  // 7.1.15 ToLength\n\n  var min = Math.min;\n  var _toLength = function (it) {\n    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n  };\n\n  var max = Math.max;\n  var min$1 = Math.min;\n  var _toAbsoluteIndex = function (index, length) {\n    index = _toInteger(index);\n    return index < 0 ? max(index + length, 0) : min$1(index, length);\n  };\n\n  // false -> Array#indexOf\n  // true  -> Array#includes\n\n\n\n  var _arrayIncludes = function (IS_INCLUDES) {\n    return function ($this, el, fromIndex) {\n      var O = _toIobject($this);\n      var length = _toLength(O.length);\n      var index = _toAbsoluteIndex(fromIndex, length);\n      var value;\n      // Array#includes uses SameValueZero equality algorithm\n      // eslint-disable-next-line no-self-compare\n      if (IS_INCLUDES && el != el) while (length > index) {\n        value = O[index++];\n        // eslint-disable-next-line no-self-compare\n        if (value != value) return true;\n      // Array#indexOf ignores holes, Array#includes - not\n      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n        if (O[index] === el) return IS_INCLUDES || index || 0;\n      } return !IS_INCLUDES && -1;\n    };\n  };\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var _global = createCommonjsModule(function (module) {\n  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n  var global = module.exports = typeof window != 'undefined' && window.Math == Math\n    ? window : typeof self != 'undefined' && self.Math == Math ? self\n    // eslint-disable-next-line no-new-func\n    : Function('return this')();\n  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n  });\n\n  var SHARED = '__core-js_shared__';\n  var store = _global[SHARED] || (_global[SHARED] = {});\n  var _shared = function (key) {\n    return store[key] || (store[key] = {});\n  };\n\n  var id = 0;\n  var px = Math.random();\n  var _uid = function (key) {\n    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n  };\n\n  var shared = _shared('keys');\n\n  var _sharedKey = function (key) {\n    return shared[key] || (shared[key] = _uid(key));\n  };\n\n  var arrayIndexOf = _arrayIncludes(false);\n  var IE_PROTO = _sharedKey('IE_PROTO');\n\n  var _objectKeysInternal = function (object, names) {\n    var O = _toIobject(object);\n    var i = 0;\n    var result = [];\n    var key;\n    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);\n    // Don't enum bug & hidden keys\n    while (names.length > i) if (_has(O, key = names[i++])) {\n      ~arrayIndexOf(result, key) || result.push(key);\n    }\n    return result;\n  };\n\n  // IE 8- don't enum bug keys\n  var _enumBugKeys = (\n    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n  ).split(',');\n\n  // 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n\n  var _objectKeys = Object.keys || function keys(O) {\n    return _objectKeysInternal(O, _enumBugKeys);\n  };\n\n  var _core = createCommonjsModule(function (module) {\n  var core = module.exports = { version: '2.5.5' };\n  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n  });\n  var _core_1 = _core.version;\n\n  var _isObject = function (it) {\n    return typeof it === 'object' ? it !== null : typeof it === 'function';\n  };\n\n  var _anObject = function (it) {\n    if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n    return it;\n  };\n\n  var _fails = function (exec) {\n    try {\n      return !!exec();\n    } catch (e) {\n      return true;\n    }\n  };\n\n  // Thank's IE8 for his funny defineProperty\n  var _descriptors = !_fails(function () {\n    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n  });\n\n  var document$1 = _global.document;\n  // typeof document.createElement is 'object' in old IE\n  var is = _isObject(document$1) && _isObject(document$1.createElement);\n  var _domCreate = function (it) {\n    return is ? document$1.createElement(it) : {};\n  };\n\n  var _ie8DomDefine = !_descriptors && !_fails(function () {\n    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n  });\n\n  // 7.1.1 ToPrimitive(input [, PreferredType])\n\n  // instead of the ES6 spec version, we didn't implement @@toPrimitive case\n  // and the second argument - flag - preferred type is a string\n  var _toPrimitive = function (it, S) {\n    if (!_isObject(it)) return it;\n    var fn, val;\n    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n    throw TypeError(\"Can't convert object to primitive value\");\n  };\n\n  var dP = Object.defineProperty;\n\n  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n    _anObject(O);\n    P = _toPrimitive(P, true);\n    _anObject(Attributes);\n    if (_ie8DomDefine) try {\n      return dP(O, P, Attributes);\n    } catch (e) { /* empty */ }\n    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n    if ('value' in Attributes) O[P] = Attributes.value;\n    return O;\n  };\n\n  var _objectDp = {\n  \tf: f\n  };\n\n  var _propertyDesc = function (bitmap, value) {\n    return {\n      enumerable: !(bitmap & 1),\n      configurable: !(bitmap & 2),\n      writable: !(bitmap & 4),\n      value: value\n    };\n  };\n\n  var _hide = _descriptors ? function (object, key, value) {\n    return _objectDp.f(object, key, _propertyDesc(1, value));\n  } : function (object, key, value) {\n    object[key] = value;\n    return object;\n  };\n\n  var _redefine = createCommonjsModule(function (module) {\n  var SRC = _uid('src');\n  var TO_STRING = 'toString';\n  var $toString = Function[TO_STRING];\n  var TPL = ('' + $toString).split(TO_STRING);\n\n  _core.inspectSource = function (it) {\n    return $toString.call(it);\n  };\n\n  (module.exports = function (O, key, val, safe) {\n    var isFunction = typeof val == 'function';\n    if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\n    if (O[key] === val) return;\n    if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n    if (O === _global) {\n      O[key] = val;\n    } else if (!safe) {\n      delete O[key];\n      _hide(O, key, val);\n    } else if (O[key]) {\n      O[key] = val;\n    } else {\n      _hide(O, key, val);\n    }\n  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n  })(Function.prototype, TO_STRING, function toString() {\n    return typeof this == 'function' && this[SRC] || $toString.call(this);\n  });\n  });\n\n  var _aFunction = function (it) {\n    if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n    return it;\n  };\n\n  // optional / simple context binding\n\n  var _ctx = function (fn, that, length) {\n    _aFunction(fn);\n    if (that === undefined) return fn;\n    switch (length) {\n      case 1: return function (a) {\n        return fn.call(that, a);\n      };\n      case 2: return function (a, b) {\n        return fn.call(that, a, b);\n      };\n      case 3: return function (a, b, c) {\n        return fn.call(that, a, b, c);\n      };\n    }\n    return function (/* ...args */) {\n      return fn.apply(that, arguments);\n    };\n  };\n\n  var PROTOTYPE = 'prototype';\n\n  var $export = function (type, name, source) {\n    var IS_FORCED = type & $export.F;\n    var IS_GLOBAL = type & $export.G;\n    var IS_STATIC = type & $export.S;\n    var IS_PROTO = type & $export.P;\n    var IS_BIND = type & $export.B;\n    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n    var key, own, out, exp;\n    if (IS_GLOBAL) source = name;\n    for (key in source) {\n      // contains in native\n      own = !IS_FORCED && target && target[key] !== undefined;\n      // export native or passed\n      out = (own ? target : source)[key];\n      // bind timers to global for call from export context\n      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n      // extend global\n      if (target) _redefine(target, key, out, type & $export.U);\n      // export\n      if (exports[key] != out) _hide(exports, key, exp);\n      if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n    }\n  };\n  _global.core = _core;\n  // type bitmap\n  $export.F = 1;   // forced\n  $export.G = 2;   // global\n  $export.S = 4;   // static\n  $export.P = 8;   // proto\n  $export.B = 16;  // bind\n  $export.W = 32;  // wrap\n  $export.U = 64;  // safe\n  $export.R = 128; // real proto method for `library`\n  var _export = $export;\n\n  // most Object methods by ES6 should accept primitives\n\n\n\n  var _objectSap = function (KEY, exec) {\n    var fn = (_core.Object || {})[KEY] || Object[KEY];\n    var exp = {};\n    exp[KEY] = exec(fn);\n    _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);\n  };\n\n  // 19.1.2.14 Object.keys(O)\n\n\n\n  _objectSap('keys', function () {\n    return function keys(it) {\n      return _objectKeys(_toObject(it));\n    };\n  });\n\n  var keys = _core.Object.keys;\n\n  var _stringRepeat = function repeat(count) {\n    var str = String(_defined(this));\n    var res = '';\n    var n = _toInteger(count);\n    if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n    for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n    return res;\n  };\n\n  _export(_export.P, 'String', {\n    // 21.1.3.13 String.prototype.repeat(count)\n    repeat: _stringRepeat\n  });\n\n  var repeat = _core.String.repeat;\n\n  // https://github.com/tc39/proposal-string-pad-start-end\n\n\n\n\n  var _stringPad = function (that, maxLength, fillString, left) {\n    var S = String(_defined(that));\n    var stringLength = S.length;\n    var fillStr = fillString === undefined ? ' ' : String(fillString);\n    var intMaxLength = _toLength(maxLength);\n    if (intMaxLength <= stringLength || fillStr == '') return S;\n    var fillLen = intMaxLength - stringLength;\n    var stringFiller = _stringRepeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n    return left ? stringFiller + S : S + stringFiller;\n  };\n\n  var navigator = _global.navigator;\n\n  var _userAgent = navigator && navigator.userAgent || '';\n\n  // https://github.com/tc39/proposal-string-pad-start-end\n\n\n\n\n  // https://github.com/zloirock/core-js/issues/280\n  _export(_export.P + _export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(_userAgent), 'String', {\n    padStart: function padStart(maxLength /* , fillString = ' ' */) {\n      return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n    }\n  });\n\n  var padStart = _core.String.padStart;\n\n  // https://github.com/tc39/proposal-string-pad-start-end\n\n\n\n\n  // https://github.com/zloirock/core-js/issues/280\n  _export(_export.P + _export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(_userAgent), 'String', {\n    padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n      return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n    }\n  });\n\n  var padEnd = _core.String.padEnd;\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var get = function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  };\n\n  var inherits = function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  var possibleConstructorReturn = function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n\n  var set = function set(object, property, value, receiver) {\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        set(parent, property, value, receiver);\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        setter.call(receiver, value);\n      }\n    }\n\n    return value;\n  };\n\n  var slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var toConsumableArray = function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n\n  /** Checks if value is string */\n  function isString(str) {\n    return typeof str === 'string' || str instanceof String;\n  }\n\n  /** Conforms string with fallback */\n  function conform(res, str) {\n    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n    return isString(res) ? res : res ? str : fallback;\n  }\n\n  /**\r\n    Direction\r\n    @prop {number} NONE\r\n    @prop {number} LEFT\r\n    @prop {number} RIGHT\r\n  */\n  var DIRECTION = {\n    NONE: 0,\n    LEFT: -1,\n    RIGHT: 1\n    /**\r\n      Direction\r\n      @enum {number}\r\n    */\n  };\n\n  /** Returns next char position in direction */\n  function indexInDirection(pos, direction) {\n    if (direction === DIRECTION.LEFT) --pos;\n    return pos;\n  }\n\n  /** Escapes regular expression control chars */\n  function escapeRegExp(str) {\n    return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\n  }\n\n  // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\n  function objectIncludes(b, a) {\n    if (a === b) return true;\n\n    var arrA = Array.isArray(a),\n        arrB = Array.isArray(b),\n        i;\n\n    if (arrA && arrB) {\n      if (a.length != b.length) return false;\n      for (i = 0; i < a.length; i++) {\n        if (!objectIncludes(a[i], b[i])) return false;\n      }return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    if (a && b && (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object') {\n      var keys = Object.keys(a);\n      // if (keys.length !== Object.keys(b).length) return false;\n\n      var dateA = a instanceof Date,\n          dateB = b instanceof Date;\n      if (dateA && dateB) return a.getTime() == b.getTime();\n      if (dateA != dateB) return false;\n\n      var regexpA = a instanceof RegExp,\n          regexpB = b instanceof RegExp;\n      if (regexpA && regexpB) return a.toString() == b.toString();\n      if (regexpA != regexpB) return false;\n\n      for (i = 0; i < keys.length; i++) {\n        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n      }for (i = 0; i < keys.length; i++) {\n        if (!objectIncludes(a[keys[i]], b[keys[i]])) return false;\n      }return true;\n    }\n\n    return false;\n  }\n\n  /* eslint-disable no-undef */\n  var g = typeof window !== 'undefined' && window || typeof global !== 'undefined' && global.global === global && global || typeof self !== 'undefined' && self.self === self && self || {};\n\n  /** Provides details of changing input */\n\n  var ActionDetails = function () {\n    /** Old input value */\n\n    /** Current input value */\n    function ActionDetails(value, cursorPos, oldValue, oldSelection) {\n      classCallCheck(this, ActionDetails);\n\n      this.value = value;\n      this.cursorPos = cursorPos;\n      this.oldValue = oldValue;\n      this.oldSelection = oldSelection;\n\n      // double check if left part was changed (autofilling, other non-standard input triggers)\n      while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n        --this.oldSelection.start;\n      }\n    }\n\n    /**\r\n      Start changing position\r\n      @readonly\r\n    */\n\n    /** Old selection */\n\n    /** Current cursor position */\n\n\n    createClass(ActionDetails, [{\n      key: 'startChangePos',\n      get: function get$$1() {\n        return Math.min(this.cursorPos, this.oldSelection.start);\n      }\n\n      /**\r\n        Inserted symbols count\r\n        @readonly\r\n      */\n\n    }, {\n      key: 'insertedCount',\n      get: function get$$1() {\n        return this.cursorPos - this.startChangePos;\n      }\n\n      /**\r\n        Inserted symbols\r\n        @readonly\r\n      */\n\n    }, {\n      key: 'inserted',\n      get: function get$$1() {\n        return this.value.substr(this.startChangePos, this.insertedCount);\n      }\n\n      /**\r\n        Removed symbols count\r\n        @readonly\r\n      */\n\n    }, {\n      key: 'removedCount',\n      get: function get$$1() {\n        // Math.max for opposite operation\n        return Math.max(this.oldSelection.end - this.startChangePos ||\n        // for Delete\n        this.oldValue.length - this.value.length, 0);\n      }\n\n      /**\r\n        Removed symbols\r\n        @readonly\r\n      */\n\n    }, {\n      key: 'removed',\n      get: function get$$1() {\n        return this.oldValue.substr(this.startChangePos, this.removedCount);\n      }\n\n      /**\r\n        Unchanged head symbols\r\n        @readonly\r\n      */\n\n    }, {\n      key: 'head',\n      get: function get$$1() {\n        return this.value.substring(0, this.startChangePos);\n      }\n\n      /**\r\n        Unchanged tail symbols\r\n        @readonly\r\n      */\n\n    }, {\n      key: 'tail',\n      get: function get$$1() {\n        return this.value.substring(this.startChangePos + this.insertedCount);\n      }\n\n      /**\r\n        Remove direction\r\n        @readonly\r\n      */\n\n    }, {\n      key: 'removeDirection',\n      get: function get$$1() {\n        if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\n\n        // align right if delete at right or if range removed (event with backspace)\n        return this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos ? DIRECTION.RIGHT : DIRECTION.LEFT;\n      }\n    }]);\n    return ActionDetails;\n  }();\n\n  /**\r\n    Provides details of changing model value\r\n    @param {Object} [details]\r\n    @param {string} [details.inserted] - Inserted symbols\r\n    @param {boolean} [details.overflow] - Is overflowed\r\n    @param {number} [details.removeCount] - Removed symbols count\r\n    @param {number} [details.shift] - Additional offset if any changes occurred before current position\r\n  */\n  var ChangeDetails = function () {\n    /** Additional offset if any changes occurred before current position */\n\n    /** Inserted symbols */\n    function ChangeDetails(details) {\n      classCallCheck(this, ChangeDetails);\n\n      _extends(this, {\n        inserted: '',\n        overflow: false,\n        shift: 0\n      }, details);\n    }\n\n    /**\r\n      Aggregate changes\r\n      @returns {ChangeDetails} `this`\r\n    */\n\n    /** Is overflowed */\n\n\n    createClass(ChangeDetails, [{\n      key: 'aggregate',\n      value: function aggregate(details) {\n        if (details.rawInserted) this.rawInserted += details.rawInserted;\n        this.inserted += details.inserted;\n        this.shift += details.shift;\n        this.overflow = this.overflow || details.overflow;\n        return this;\n      }\n\n      /** Total offset considering all changes */\n\n    }, {\n      key: 'offset',\n      get: function get$$1() {\n        return this.shift + this.inserted.length;\n      }\n\n      /** Raw inserted is used by dynamic mask */\n\n    }, {\n      key: 'rawInserted',\n      get: function get$$1() {\n        return this._rawInserted != null ? this._rawInserted : this.inserted;\n      },\n      set: function set$$1(rawInserted) {\n        this._rawInserted = rawInserted;\n      }\n    }]);\n    return ChangeDetails;\n  }();\n\n  /** Supported mask type */\n\n\n  /** Append flags */\n\n\n  /** Extract flags */\n\n  /** Provides common masking stuff */\n  var Masked = function () {\n    /** Does additional processing in the end of editing */\n\n    /** Transforms value before mask processing */\n    function Masked(opts) {\n      classCallCheck(this, Masked);\n\n      this._value = '';\n      this._update(opts);\n      this.isInitialized = true;\n    }\n\n    /** Sets and applies new options */\n\n    /** */\n\n    /** Validates if value is acceptable */\n    // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773\n\n    /** @type {Mask} */\n\n\n    createClass(Masked, [{\n      key: 'updateOptions',\n      value: function updateOptions(opts) {\n        this.withValueRefresh(this._update.bind(this, opts));\n      }\n\n      /**\r\n        Sets new options\r\n        @protected\r\n      */\n\n    }, {\n      key: '_update',\n      value: function _update(opts) {\n        _extends(this, opts);\n      }\n\n      /** Clones masked with options and value */\n\n    }, {\n      key: 'clone',\n      value: function clone() {\n        var m = new Masked(this);\n        m._value = this.value.slice();\n        return m;\n      }\n\n      /** */\n\n    }, {\n      key: 'assign',\n      value: function assign(source) {\n        // $FlowFixMe\n        return _extends(this, source);\n      }\n\n      /** Resets value */\n\n    }, {\n      key: 'reset',\n      value: function reset() {\n        this._value = '';\n      }\n\n      /** */\n\n    }, {\n      key: 'resolve',\n\n\n      /** Resolve new value */\n      value: function resolve(value) {\n        this.reset();\n        this._append(value, { input: true });\n        this._appendTail();\n        this.doCommit();\n        return this.value;\n      }\n\n      /** */\n\n    }, {\n      key: 'nearestInputPos',\n\n\n      /** Finds nearest input position in direction */\n      value: function nearestInputPos(cursorPos, direction) {\n        return cursorPos;\n      }\n\n      /** Extracts value in range considering flags */\n\n    }, {\n      key: 'extractInput',\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        return this.value.slice(fromPos, toPos);\n      }\n\n      /** Extracts tail in range */\n\n    }, {\n      key: '_extractTail',\n      value: function _extractTail() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        return {\n          value: this.extractInput(fromPos, toPos),\n          fromPos: fromPos,\n          toPos: toPos\n        };\n      }\n\n      /** Appends tail */\n\n    }, {\n      key: '_appendTail',\n      value: function _appendTail(tail) {\n        return this._append(tail ? tail.value : '', { tail: true });\n      }\n\n      /** Appends symbols considering flags */\n\n    }, {\n      key: '_append',\n      value: function _append(str) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var oldValueLength = this.value.length;\n        var consistentValue = this.clone();\n        var overflow = false;\n\n        str = this.doPrepare(str, flags);\n\n        for (var ci = 0; ci < str.length; ++ci) {\n          this._value += str[ci];\n          if (this.doValidate(flags) === false) {\n            this.assign(consistentValue);\n            if (!flags.input) {\n              // in `input` mode dont skip invalid chars\n              overflow = true;\n              break;\n            }\n          }\n\n          consistentValue = this.clone();\n        }\n\n        return new ChangeDetails({\n          inserted: this.value.slice(oldValueLength),\n          overflow: overflow\n        });\n      }\n\n      /** Appends symbols considering tail */\n\n    }, {\n      key: 'appendWithTail',\n      value: function appendWithTail(str, tail) {\n        // TODO refactor\n        var aggregateDetails = new ChangeDetails();\n        var consistentValue = this.clone();\n        var consistentAppended = void 0;\n\n        for (var ci = 0; ci < str.length; ++ci) {\n          var ch = str[ci];\n\n          var appendDetails = this._append(ch, { input: true });\n          consistentAppended = this.clone();\n          var tailAppended = !appendDetails.overflow && !this._appendTail(tail).overflow;\n          if (!tailAppended || this.doValidate({ tail: true }) === false) {\n            this.assign(consistentValue);\n            break;\n          }\n\n          this.assign(consistentAppended);\n          consistentValue = this.clone();\n          aggregateDetails.aggregate(appendDetails);\n        }\n\n        // TODO needed for cases when\n        // 1) REMOVE ONLY AND NO LOOP AT ALL\n        // 2) last loop iteration removes tail\n        // 3) when breaks on tail insert\n\n        // aggregate only shift from tail\n        aggregateDetails.shift += this._appendTail(tail).shift;\n\n        return aggregateDetails;\n      }\n\n      /** */\n\n    }, {\n      key: 'remove',\n      value: function remove() {\n        var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length - from;\n\n        this._value = this.value.slice(0, from) + this.value.slice(from + count);\n        return new ChangeDetails();\n      }\n\n      /** Calls function and reapplies current value */\n\n    }, {\n      key: 'withValueRefresh',\n      value: function withValueRefresh(fn) {\n        if (this._refreshing || !this.isInitialized) return fn();\n        this._refreshing = true;\n\n        var unmasked = this.unmaskedValue;\n        var value = this.value;\n\n        var ret = fn();\n\n        // try to update with raw value first to keep fixed chars\n        if (this.resolve(value) !== value) {\n          // or fallback to unmasked\n          this.unmaskedValue = unmasked;\n        }\n\n        delete this._refreshing;\n        return ret;\n      }\n\n      /**\r\n        Prepares string before mask processing\r\n        @protected\r\n      */\n\n    }, {\n      key: 'doPrepare',\n      value: function doPrepare(str) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return this.prepare ? this.prepare(str, this, flags) : str;\n      }\n\n      /**\r\n        Validates if value is acceptable\r\n        @protected\r\n      */\n\n    }, {\n      key: 'doValidate',\n      value: function doValidate(flags) {\n        return !this.validate || this.validate(this.value, this, flags);\n      }\n\n      /**\r\n        Does additional processing in the end of editing\r\n        @protected\r\n      */\n\n    }, {\n      key: 'doCommit',\n      value: function doCommit() {\n        if (this.commit) this.commit(this.value, this);\n      }\n\n      // TODO\n      // insert (str, fromPos, flags)\n\n      /** */\n\n    }, {\n      key: 'splice',\n      value: function splice(start, deleteCount, inserted, removeDirection) {\n        var tailPos = start + deleteCount;\n        var tail = this._extractTail(tailPos);\n\n        var startChangePos = this.nearestInputPos(start, removeDirection);\n        var changeDetails = new ChangeDetails({\n          shift: startChangePos - start // adjust shift if start was aligned\n        }).aggregate(this.remove(startChangePos)).aggregate(this.appendWithTail(inserted, tail));\n\n        return changeDetails;\n      }\n    }, {\n      key: 'value',\n      get: function get$$1() {\n        return this._value;\n      },\n      set: function set$$1(value) {\n        this.resolve(value);\n      }\n    }, {\n      key: 'unmaskedValue',\n      get: function get$$1() {\n        return this.value;\n      },\n      set: function set$$1(value) {\n        this.reset();\n        this._append(value);\n        this._appendTail();\n        this.doCommit();\n      }\n\n      /** */\n\n    }, {\n      key: 'typedValue',\n      get: function get$$1() {\n        return this.unmaskedValue;\n      },\n      set: function set$$1(value) {\n        this.unmaskedValue = value;\n      }\n\n      /** Value that includes raw user input */\n\n    }, {\n      key: 'rawInputValue',\n      get: function get$$1() {\n        return this.extractInput(0, this.value.length, { raw: true });\n      },\n      set: function set$$1(value) {\n        this.reset();\n        this._append(value, { raw: true });\n        this._appendTail();\n        this.doCommit();\n      }\n\n      /** */\n\n    }, {\n      key: 'isComplete',\n      get: function get$$1() {\n        return true;\n      }\n    }]);\n    return Masked;\n  }();\n\n  /** Get Masked class by mask type */\n  function maskedClass(mask) {\n    if (mask == null) {\n      throw new Error('mask property should be defined');\n    }\n\n    if (mask instanceof RegExp) return g.IMask.MaskedRegExp;\n    if (isString(mask)) return g.IMask.MaskedPattern;\n    if (mask instanceof Date || mask === Date) return g.IMask.MaskedDate;\n    if (mask instanceof Number || typeof mask === 'number' || mask === Number) return g.IMask.MaskedNumber;\n    if (Array.isArray(mask) || mask === Array) return g.IMask.MaskedDynamic;\n    // $FlowFixMe\n    if (mask.prototype instanceof g.IMask.Masked) return mask;\n    // $FlowFixMe\n    if (mask instanceof Function) return g.IMask.MaskedFunction;\n\n    console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\n    return g.IMask.Masked;\n  }\n\n  /** Creates new {@link Masked} depending on mask type */\n  function createMask(opts) {\n    opts = _extends({}, opts); // clone\n    var mask = opts.mask;\n\n    if (mask instanceof g.IMask.Masked) return mask;\n\n    var MaskedClass = maskedClass(mask);\n    return new MaskedClass(opts);\n  }\n\n  /** */\n\n  /** */\n  var PatternDefinition = function () {\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n    function PatternDefinition(opts) {\n      classCallCheck(this, PatternDefinition);\n      // TODO flow\n      _extends(this, opts);\n\n      if (this.mask) {\n        this._masked = createMask(opts);\n      }\n    }\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n\n    /** */\n\n\n    createClass(PatternDefinition, [{\n      key: 'reset',\n      value: function reset() {\n        this.isHollow = false;\n        this.isRawInput = false;\n        if (this._masked) this._masked.reset();\n      }\n\n      /** */\n\n    }, {\n      key: 'resolve',\n\n\n      /** */\n      value: function resolve(ch) {\n        if (!this._masked) return false;\n        return this._masked.resolve(ch);\n      }\n    }, {\n      key: 'isInput',\n      get: function get$$1() {\n        return this.type === PatternDefinition.TYPES.INPUT;\n      }\n\n      /** */\n\n    }, {\n      key: 'isHiddenHollow',\n      get: function get$$1() {\n        return this.isHollow && this.optional;\n      }\n    }]);\n    return PatternDefinition;\n  }();\n\n  PatternDefinition.DEFAULTS = {\n    '0': /\\d/,\n    'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/, // http://stackoverflow.com/a/22075070\n    '*': /./\n  };\n  /**\r\n    @prop {string} INPUT\r\n    @prop {string} FIXED\r\n  */\n  PatternDefinition.TYPES = {\n    INPUT: 'input',\n    FIXED: 'fixed'\n  };\n\n  /** */\n\n\n  /** */\n\n  /**\r\n    Pattern group symbols from parent\r\n    @param {MaskedPattern} masked - Internal {@link masked} model\r\n    @param {Object} opts\r\n    @param {string} opts.name - Group name\r\n    @param {number} opts.offset - Group offset in masked definitions array\r\n    @param {string} opts.mask - Group mask\r\n    @param {Function} [opts.validate] - Custom group validator\r\n  */\n  var PatternGroup = function () {\n    /** Group mask */\n\n    /** Group name */\n\n    /** */\n    function PatternGroup(masked, _ref) {\n      var name = _ref.name,\n          offset = _ref.offset,\n          mask = _ref.mask,\n          validate = _ref.validate;\n      classCallCheck(this, PatternGroup);\n\n      this.masked = masked;\n      this.name = name;\n      this.offset = offset;\n      this.mask = mask;\n      this.validate = validate || function () {\n        return true;\n      };\n    }\n\n    /** Slice of internal {@link masked} value */\n\n    /** Custom group validator */\n\n    /** Group offset in masked definitions array */\n\n\n    /** Internal {@link masked} model */\n\n    /** */\n\n\n    createClass(PatternGroup, [{\n      key: 'doValidate',\n\n\n      /** Validates if current value is acceptable */\n      value: function doValidate(flags) {\n        return this.validate(this.value, this, flags);\n      }\n    }, {\n      key: 'value',\n      get: function get$$1() {\n        return this.masked.value.slice(this.masked.mapDefIndexToPos(this.offset), this.masked.mapDefIndexToPos(this.offset + this.mask.length));\n      }\n\n      /** Unmasked slice of internal {@link masked} value */\n\n    }, {\n      key: 'unmaskedValue',\n      get: function get$$1() {\n        return this.masked.extractInput(this.masked.mapDefIndexToPos(this.offset), this.masked.mapDefIndexToPos(this.offset + this.mask.length));\n      }\n    }]);\n    return PatternGroup;\n  }();\n  var RangeGroup = function () {\n    /** @type {Function} */\n    function RangeGroup(_ref2) {\n      var _ref3 = slicedToArray(_ref2, 2),\n          from = _ref3[0],\n          to = _ref3[1];\n\n      var maxlen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(to).length;\n      classCallCheck(this, RangeGroup);\n\n      this._from = from;\n      this._to = to;\n      this._maxLength = maxlen;\n      this.validate = this.validate.bind(this);\n\n      this._update();\n    }\n    /** @type {string} */\n\n\n    createClass(RangeGroup, [{\n      key: '_update',\n      value: function _update() {\n        this._maxLength = Math.max(this._maxLength, String(this.to).length);\n        this.mask = '0'.repeat(this._maxLength);\n      }\n    }, {\n      key: 'validate',\n      value: function validate(str) {\n        var minstr = '';\n        var maxstr = '';\n\n        var _ref4 = str.match(/^(\\D*)(\\d*)(\\D*)/) || [],\n            _ref5 = slicedToArray(_ref4, 3),\n            placeholder = _ref5[1],\n            num = _ref5[2];\n\n        if (num) {\n          minstr = '0'.repeat(placeholder.length) + num;\n          maxstr = '9'.repeat(placeholder.length) + num;\n        }\n\n        var firstNonZero = str.search(/[^0]/);\n        if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n\n        minstr = minstr.padEnd(this._maxLength, '0');\n        maxstr = maxstr.padEnd(this._maxLength, '9');\n\n        return this.from <= Number(maxstr) && Number(minstr) <= this.to;\n      }\n    }, {\n      key: 'to',\n      get: function get$$1() {\n        return this._to;\n      },\n      set: function set$$1(to) {\n        this._to = to;\n        this._update();\n      }\n    }, {\n      key: 'from',\n      get: function get$$1() {\n        return this._from;\n      },\n      set: function set$$1(from) {\n        this._from = from;\n        this._update();\n      }\n    }, {\n      key: 'maxLength',\n      get: function get$$1() {\n        return this._maxLength;\n      },\n      set: function set$$1(maxLength) {\n        this._maxLength = maxLength;\n        this._update();\n      }\n    }, {\n      key: '_matchFrom',\n      get: function get$$1() {\n        return this.maxLength - String(this.from).length;\n      }\n    }]);\n    return RangeGroup;\n  }();\n\n  /** Pattern group that validates enum values */\n  function EnumGroup(enums) {\n    return {\n      mask: '*'.repeat(enums[0].length),\n      validate: function validate(value, group, flags) {\n        return enums.some(function (e) {\n          return e.indexOf(group.unmaskedValue) >= 0;\n        });\n      }\n    };\n  }\n\n  PatternGroup.Range = RangeGroup;\n  PatternGroup.Enum = EnumGroup;\n\n  var ChunksTailDetails = function () {\n    function ChunksTailDetails(chunks) {\n      classCallCheck(this, ChunksTailDetails);\n\n      this.chunks = chunks;\n    }\n\n    createClass(ChunksTailDetails, [{\n      key: 'value',\n      get: function get$$1() {\n        return this.chunks.map(function (c) {\n          return c.value;\n        }).join('');\n      }\n    }, {\n      key: 'fromPos',\n      get: function get$$1() {\n        var firstChunk = this.chunks[0];\n        return firstChunk && firstChunk.stop;\n      }\n    }, {\n      key: 'toPos',\n      get: function get$$1() {\n        var lastChunk = this.chunks[this.chunks.length - 1];\n        return lastChunk && lastChunk.stop;\n      }\n    }]);\n    return ChunksTailDetails;\n  }();\n\n  /**\r\n    Pattern mask\r\n    @param {Object} opts\r\n    @param {Object} opts.groups\r\n    @param {Object} opts.definitions\r\n    @param {string} opts.placeholderChar\r\n    @param {boolean} opts.lazy\r\n  */\n  var MaskedPattern = function (_Masked) {\n    inherits(MaskedPattern, _Masked);\n\n    // TODO mask type\n    /** Single char for empty input */\n\n\n    /** */\n    function MaskedPattern() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      classCallCheck(this, MaskedPattern);\n      // TODO type $Shape<MaskedPatternOptions>={} does not work\n      opts.definitions = _extends({}, PatternDefinition.DEFAULTS, opts.definitions);\n      return possibleConstructorReturn(this, (MaskedPattern.__proto__ || Object.getPrototypeOf(MaskedPattern)).call(this, _extends({}, MaskedPattern.DEFAULTS, opts)));\n    }\n\n    /**\r\n      @override\r\n      @param {Object} opts\r\n    */\n\n    /** Show placeholder only when needed */\n\n    /** */\n\n\n    createClass(MaskedPattern, [{\n      key: '_update',\n      value: function _update() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        opts.definitions = _extends({}, this.definitions, opts.definitions);\n        get(MaskedPattern.prototype.__proto__ || Object.getPrototypeOf(MaskedPattern.prototype), '_update', this).call(this, opts);\n        this._rebuildMask();\n      }\n\n      /** */\n\n    }, {\n      key: '_rebuildMask',\n      value: function _rebuildMask() {\n        var _this2 = this;\n\n        var defs = this.definitions;\n        this._charDefs = [];\n        this._groupDefs = [];\n\n        var pattern = this.mask;\n        if (!pattern || !defs) return;\n\n        var unmaskingBlock = false;\n        var optionalBlock = false;\n        var stopAlign = false;\n\n        var _loop = function _loop(_i) {\n          if (_this2.groups) {\n            var p = pattern.slice(_i);\n            var gNames = Object.keys(_this2.groups).filter(function (gName) {\n              return p.indexOf(gName) === 0;\n            });\n            // order by key length\n            gNames.sort(function (a, b) {\n              return b.length - a.length;\n            });\n            // use group name with max length\n            var gName = gNames[0];\n            if (gName) {\n              var group = _this2.groups[gName];\n              _this2._groupDefs.push(new PatternGroup(_this2, {\n                name: gName,\n                offset: _this2._charDefs.length,\n                mask: group.mask,\n                validate: group.validate\n              }));\n              pattern = pattern.replace(gName, group.mask);\n            }\n          }\n\n          var char = pattern[_i];\n          var type = char in defs ? PatternDefinition.TYPES.INPUT : PatternDefinition.TYPES.FIXED;\n          var unmasking = type === PatternDefinition.TYPES.INPUT || unmaskingBlock;\n          var optional = type === PatternDefinition.TYPES.INPUT && optionalBlock;\n\n          if (char === MaskedPattern.STOP_CHAR) {\n            stopAlign = true;\n            return 'continue';\n          }\n\n          if (char === '{' || char === '}') {\n            unmaskingBlock = !unmaskingBlock;\n            return 'continue';\n          }\n\n          if (char === '[' || char === ']') {\n            optionalBlock = !optionalBlock;\n            return 'continue';\n          }\n\n          if (char === MaskedPattern.ESCAPE_CHAR) {\n            ++_i;\n            char = pattern[_i];\n            if (!char) return 'break';\n            type = PatternDefinition.TYPES.FIXED;\n          }\n\n          _this2._charDefs.push(new PatternDefinition({\n            char: char,\n            type: type,\n            optional: optional,\n            stopAlign: stopAlign,\n            unmasking: unmasking,\n            mask: type === PatternDefinition.TYPES.INPUT ? defs[char] : function (value) {\n              return value === char;\n            }\n          }));\n\n          stopAlign = false;\n          i = _i;\n        };\n\n        _loop2: for (var i = 0; i < pattern.length; ++i) {\n          var _ret = _loop(i);\n\n          switch (_ret) {\n            case 'continue':\n              continue;\n\n            case 'break':\n              break _loop2;}\n        }\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'doValidate',\n      value: function doValidate() {\n        var _babelHelpers$get;\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return this._groupDefs.every(function (g$$1) {\n          return g$$1.doValidate.apply(g$$1, toConsumableArray(args));\n        }) && (_babelHelpers$get = get(MaskedPattern.prototype.__proto__ || Object.getPrototypeOf(MaskedPattern.prototype), 'doValidate', this)).call.apply(_babelHelpers$get, [this].concat(toConsumableArray(args)));\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'clone',\n      value: function clone() {\n        var _this3 = this;\n\n        var m = new MaskedPattern(this);\n        m._value = this.value;\n        // $FlowFixMe\n        m._charDefs.forEach(function (d, i) {\n          return _extends(d, _this3._charDefs[i]);\n        });\n        // $FlowFixMe\n        m._groupDefs.forEach(function (d, i) {\n          return _extends(d, _this3._groupDefs[i]);\n        });\n        return m;\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'reset',\n      value: function reset() {\n        get(MaskedPattern.prototype.__proto__ || Object.getPrototypeOf(MaskedPattern.prototype), 'reset', this).call(this);\n        this._charDefs.forEach(function (d) {\n          delete d.isHollow;\n        });\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'hiddenHollowsBefore',\n\n\n      /** */\n      value: function hiddenHollowsBefore(defIndex) {\n        return this._charDefs.slice(0, defIndex).filter(function (d) {\n          return d.isHiddenHollow;\n        }).length;\n      }\n\n      /** Map definition index to position on view */\n\n    }, {\n      key: 'mapDefIndexToPos',\n      value: function mapDefIndexToPos(defIndex) {\n        return defIndex - this.hiddenHollowsBefore(defIndex);\n      }\n\n      /** Map position on view to definition index */\n\n    }, {\n      key: 'mapPosToDefIndex',\n      value: function mapPosToDefIndex(pos) {\n        var defIndex = pos;\n        for (var di = 0; di < this._charDefs.length; ++di) {\n          var def = this._charDefs[di];\n          if (di >= defIndex) break;\n          if (def.isHiddenHollow) ++defIndex;\n        }\n        return defIndex;\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: '_appendTail',\n\n\n      /**\r\n        @override\r\n      */\n      value: function _appendTail(tail) {\n        var details = new ChangeDetails();\n        if (tail) {\n          details.aggregate(tail instanceof ChunksTailDetails ? this._appendChunks(tail.chunks, { tail: true }) : get(MaskedPattern.prototype.__proto__ || Object.getPrototypeOf(MaskedPattern.prototype), '_appendTail', this).call(this, tail));\n        }\n        return details.aggregate(this._appendPlaceholder());\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: '_append',\n      value: function _append(str) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var oldValueLength = this.value.length;\n        var rawInserted = '';\n        var overflow = false;\n\n        str = this.doPrepare(str, flags);\n\n        for (var ci = 0, di = this.mapPosToDefIndex(this.value.length); ci < str.length;) {\n          var ch = str[ci];\n          var def = this._charDefs[di];\n\n          // check overflow\n          if (def == null) {\n            overflow = true;\n            break;\n          }\n\n          // reset\n          def.isHollow = false;\n\n          var resolved = void 0,\n              skipped = void 0;\n          var chres = conform(def.resolve(ch), ch);\n\n          if (def.type === PatternDefinition.TYPES.INPUT) {\n            if (chres) {\n              this._value += chres;\n              if (!this.doValidate()) {\n                chres = '';\n                this._value = this.value.slice(0, -1);\n              }\n            }\n\n            resolved = !!chres;\n            skipped = !chres && !def.optional;\n\n            if (!chres) {\n              if (!def.optional && !flags.input && !this.lazy) {\n                this._value += this.placeholderChar;\n                skipped = false;\n              }\n              if (!skipped) def.isHollow = true;\n            } else {\n              rawInserted += chres;\n            }\n          } else {\n            this._value += def.char;\n            resolved = chres && (def.unmasking || flags.input || flags.raw) && !flags.tail;\n            def.isRawInput = resolved && (flags.raw || flags.input);\n            if (def.isRawInput) rawInserted += def.char;\n          }\n\n          if (!skipped) ++di;\n          if (resolved || skipped) ++ci;\n        }\n\n        return new ChangeDetails({\n          inserted: this.value.slice(oldValueLength),\n          rawInserted: rawInserted,\n          overflow: overflow\n        });\n      }\n\n      /** Appends chunks splitted by stop chars */\n\n    }, {\n      key: '_appendChunks',\n      value: function _appendChunks(chunks) {\n        var details = new ChangeDetails();\n\n        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        for (var ci = 0; ci < chunks.length; ++ci) {\n          var _chunks$ci = chunks[ci],\n              stop = _chunks$ci.stop,\n              value = _chunks$ci.value;\n\n          var fromDef = stop != null && this._charDefs[stop];\n          // lets double check if stopAlign is here\n          if (fromDef && fromDef.stopAlign) details.aggregate(this._appendPlaceholder(stop));\n          if (details.aggregate(this._append.apply(this, [value].concat(toConsumableArray(args)))).overflow) break;\n        }\n        return details;\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: '_extractTail',\n      value: function _extractTail() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        return new ChunksTailDetails(this._extractInputChunks(fromPos, toPos));\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'extractInput',\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        if (fromPos === toPos) return '';\n\n        var str = this.value;\n        var input = '';\n\n        var toDefIndex = this.mapPosToDefIndex(toPos);\n        for (var ci = fromPos, di = this.mapPosToDefIndex(fromPos); ci < toPos && ci < str.length && di < toDefIndex; ++di) {\n          var ch = str[ci];\n          var def = this._charDefs[di];\n\n          if (!def) break;\n          if (def.isHiddenHollow) continue;\n\n          if (def.isInput && !def.isHollow || flags.raw && !def.isInput && def.isRawInput) input += ch;\n          ++ci;\n        }\n        return input;\n      }\n\n      /** Extracts chunks from input splitted by stop chars */\n\n    }, {\n      key: '_extractInputChunks',\n      value: function _extractInputChunks() {\n        var _this4 = this;\n\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        if (fromPos === toPos) return [];\n\n        var fromDefIndex = this.mapPosToDefIndex(fromPos);\n        var toDefIndex = this.mapPosToDefIndex(toPos);\n        var stopDefIndices = this._charDefs.map(function (d, i) {\n          return [d, i];\n        }).slice(fromDefIndex, toDefIndex).filter(function (_ref) {\n          var _ref2 = slicedToArray(_ref, 1),\n              d = _ref2[0];\n\n          return d.stopAlign;\n        }).map(function (_ref3) {\n          var _ref4 = slicedToArray(_ref3, 2),\n              i = _ref4[1];\n\n          return i;\n        });\n\n        var stops = [fromDefIndex].concat(toConsumableArray(stopDefIndices), [toDefIndex]);\n\n        return stops.map(function (s, i) {\n          return {\n            stop: stopDefIndices.indexOf(s) >= 0 ? s : null,\n\n            value: _this4.extractInput(_this4.mapDefIndexToPos(s), _this4.mapDefIndexToPos(stops[++i]))\n          };\n        }).filter(function (_ref5) {\n          var stop = _ref5.stop,\n              value = _ref5.value;\n          return stop != null || value;\n        });\n      }\n\n      /** Appends placeholder depending on laziness */\n\n    }, {\n      key: '_appendPlaceholder',\n      value: function _appendPlaceholder(toDefIndex) {\n        var oldValueLength = this.value.length;\n        var maxDefIndex = toDefIndex || this._charDefs.length;\n        for (var di = this.mapPosToDefIndex(this.value.length); di < maxDefIndex; ++di) {\n          var def = this._charDefs[di];\n          if (def.isInput) def.isHollow = true;\n\n          if (!this.lazy || toDefIndex) {\n            this._value += !def.isInput && def.char != null ? def.char : !def.optional ? this.placeholderChar : '';\n          }\n        }\n        return new ChangeDetails({\n          inserted: this.value.slice(oldValueLength)\n        });\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'remove',\n      value: function remove() {\n        var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length - from;\n\n        var fromDefIndex = this.mapPosToDefIndex(from);\n        var toDefIndex = this.mapPosToDefIndex(from + count);\n        this._charDefs.slice(fromDefIndex, toDefIndex).forEach(function (d) {\n          return d.reset();\n        });\n\n        return get(MaskedPattern.prototype.__proto__ || Object.getPrototypeOf(MaskedPattern.prototype), 'remove', this).call(this, from, count);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'nearestInputPos',\n      value: function nearestInputPos(cursorPos) {\n        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\n\n        var step = direction || DIRECTION.RIGHT;\n\n        var initialDefIndex = this.mapPosToDefIndex(cursorPos);\n        var initialDef = this._charDefs[initialDefIndex];\n        var di = initialDefIndex;\n\n        var firstInputIndex = void 0,\n            firstFilledInputIndex = void 0,\n            firstVisibleHollowIndex = void 0,\n            nextdi = void 0;\n\n        // check if chars at right is acceptable for LEFT and NONE directions\n        if (direction !== DIRECTION.RIGHT && (initialDef && initialDef.isInput ||\n        // in none direction latest position is acceptable also\n        direction === DIRECTION.NONE && cursorPos === this.value.length)) {\n          firstInputIndex = initialDefIndex;\n          if (initialDef && !initialDef.isHollow) firstFilledInputIndex = initialDefIndex;\n        }\n\n        if (firstFilledInputIndex == null && direction == DIRECTION.LEFT || firstInputIndex == null) {\n          // search forward\n          for (nextdi = indexInDirection(di, step); 0 <= nextdi && nextdi < this._charDefs.length; di += step, nextdi += step) {\n            var nextDef = this._charDefs[nextdi];\n            if (firstInputIndex == null && nextDef.isInput) {\n              firstInputIndex = di;\n              if (direction === DIRECTION.NONE) break;\n            }\n            if (firstVisibleHollowIndex == null && nextDef.isHollow && !nextDef.isHiddenHollow) firstVisibleHollowIndex = di;\n            if (nextDef.isInput && !nextDef.isHollow) {\n              firstFilledInputIndex = di;\n              break;\n            }\n          }\n        }\n\n        // for lazy if has aligned left inside fixed and has came to the start - use start position\n        if (direction === DIRECTION.LEFT && di === 0 && this.lazy && !this.extractInput() && (!initialDef || !initialDef.isInput)) firstInputIndex = 0;\n\n        if (direction === DIRECTION.LEFT || firstInputIndex == null) {\n          // search backward\n          step = -step;\n          var overflow = false;\n\n          // find hollows only before initial pos\n          for (nextdi = indexInDirection(di, step); 0 <= nextdi && nextdi < this._charDefs.length; di += step, nextdi += step) {\n            var _nextDef = this._charDefs[nextdi];\n            if (_nextDef.isInput) {\n              firstInputIndex = di;\n              if (_nextDef.isHollow && !_nextDef.isHiddenHollow) break;\n            }\n\n            // if hollow not found before start position - set `overflow`\n            // and try to find just any input\n            if (di === initialDefIndex) overflow = true;\n\n            // first input found\n            if (overflow && firstInputIndex != null) break;\n          }\n\n          // process overflow\n          overflow = overflow || nextdi >= this._charDefs.length;\n          if (overflow && firstInputIndex != null) di = firstInputIndex;\n        } else if (firstFilledInputIndex == null) {\n          // adjust index if delete at right and filled input not found at right\n          di = firstVisibleHollowIndex != null ? firstVisibleHollowIndex : firstInputIndex;\n        }\n\n        return this.mapDefIndexToPos(di);\n      }\n\n      /** Get group by name */\n\n    }, {\n      key: 'group',\n      value: function group(name) {\n        return this.groupsByName(name)[0];\n      }\n\n      /** Get all groups by name */\n\n    }, {\n      key: 'groupsByName',\n      value: function groupsByName(name) {\n        return this._groupDefs.filter(function (g$$1) {\n          return g$$1.name === name;\n        });\n      }\n    }, {\n      key: 'isComplete',\n      get: function get$$1() {\n        var _this5 = this;\n\n        return !this._charDefs.some(function (d, i) {\n          return d.isInput && !d.optional && (d.isHollow || !_this5.extractInput(i, i + 1));\n        });\n      }\n    }, {\n      key: 'unmaskedValue',\n      get: function get$$1() {\n        var str = this.value;\n        var unmasked = '';\n\n        for (var ci = 0, di = 0; ci < str.length && di < this._charDefs.length; ++di) {\n          var ch = str[ci];\n          var def = this._charDefs[di];\n\n          if (def.isHiddenHollow) continue;\n          if (def.unmasking && !def.isHollow) unmasked += ch;\n          ++ci;\n        }\n\n        return unmasked;\n      },\n      set: function set$$1(unmaskedValue) {\n        set(MaskedPattern.prototype.__proto__ || Object.getPrototypeOf(MaskedPattern.prototype), 'unmaskedValue', unmaskedValue, this);\n      }\n    }]);\n    return MaskedPattern;\n  }(Masked);\n\n  MaskedPattern.DEFAULTS = {\n    lazy: true,\n    placeholderChar: '_'\n  };\n  MaskedPattern.STOP_CHAR = '`';\n  MaskedPattern.ESCAPE_CHAR = '\\\\';\n  MaskedPattern.Definition = PatternDefinition;\n  MaskedPattern.Group = PatternGroup;\n\n  /** Date mask */\n\n  var MaskedDate = function (_MaskedPattern) {\n    inherits(MaskedDate, _MaskedPattern);\n\n    /**\r\n      @param {Object} opts\r\n    */\n\n    /** Start date */\n\n    /** Format Date to string */\n    function MaskedDate(opts) {\n      classCallCheck(this, MaskedDate);\n      return possibleConstructorReturn(this, (MaskedDate.__proto__ || Object.getPrototypeOf(MaskedDate)).call(this, _extends({}, MaskedDate.DEFAULTS, opts)));\n    }\n\n    /**\r\n      @override\r\n    */\n\n    /** End date */\n\n    /** Pattern mask for date according to {@link MaskedDate#format} */\n\n\n    /** Parse string to Date */\n\n\n    createClass(MaskedDate, [{\n      key: '_update',\n      value: function _update(opts) {\n        if (opts.mask === Date) delete opts.mask;\n        if (opts.pattern) {\n          opts.mask = opts.pattern;\n          delete opts.pattern;\n        }\n\n        var groups = opts.groups;\n        opts.groups = _extends({}, MaskedDate.GET_DEFAULT_GROUPS());\n        // adjust year group\n        if (opts.min) opts.groups.Y.from = opts.min.getFullYear();\n        if (opts.max) opts.groups.Y.to = opts.max.getFullYear();\n        _extends(opts.groups, groups);\n\n        get(MaskedDate.prototype.__proto__ || Object.getPrototypeOf(MaskedDate.prototype), '_update', this).call(this, opts);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'doValidate',\n      value: function doValidate() {\n        var _babelHelpers$get;\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var valid = (_babelHelpers$get = get(MaskedDate.prototype.__proto__ || Object.getPrototypeOf(MaskedDate.prototype), 'doValidate', this)).call.apply(_babelHelpers$get, [this].concat(toConsumableArray(args)));\n        var date = this.date;\n\n        return valid && (!this.isComplete || this.isDateExist(this.value) && date && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\n      }\n\n      /** Checks if date is exists */\n\n    }, {\n      key: 'isDateExist',\n      value: function isDateExist(str) {\n        return this.format(this.parse(str)) === str;\n      }\n\n      /** Parsed Date */\n\n    }, {\n      key: 'date',\n      get: function get$$1() {\n        return this.isComplete ? this.parse(this.value) : null;\n      },\n      set: function set$$1(date) {\n        this.value = this.format(date);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'typedValue',\n      get: function get$$1() {\n        return this.date;\n      },\n      set: function set$$1(value) {\n        this.date = value;\n      }\n    }]);\n    return MaskedDate;\n  }(MaskedPattern);\n\n  MaskedDate.DEFAULTS = {\n    pattern: 'd{.}`m{.}`Y',\n    format: function format(date) {\n      var day = String(date.getDate()).padStart(2, '0');\n      var month = String(date.getMonth() + 1).padStart(2, '0');\n      var year = date.getFullYear();\n\n      return [day, month, year].join('.');\n    },\n    parse: function parse(str) {\n      var _str$split = str.split('.'),\n          _str$split2 = slicedToArray(_str$split, 3),\n          day = _str$split2[0],\n          month = _str$split2[1],\n          year = _str$split2[2];\n\n      return new Date(year, month - 1, day);\n    }\n  };\n  MaskedDate.GET_DEFAULT_GROUPS = function () {\n    return {\n      d: new PatternGroup.Range([1, 31]),\n      m: new PatternGroup.Range([1, 12]),\n      Y: new PatternGroup.Range([1900, 9999])\n    };\n  };\n\n  /**\r\n    Generic element API to use with mask\r\n    @interface\r\n  */\n  var MaskElement = function () {\n    function MaskElement() {\n      classCallCheck(this, MaskElement);\n    }\n\n    createClass(MaskElement, [{\n      key: 'select',\n      value: function select(start, end) {\n        if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n\n        try {\n          this._unsafeSelect(start, end);\n        } catch (e) {}\n      }\n    }, {\n      key: '_unsafeSelect',\n      value: function _unsafeSelect(start, end) {}\n    }, {\n      key: 'isActive',\n      value: function isActive() {\n        return false;\n      }\n    }, {\n      key: 'bindEvents',\n      value: function bindEvents(handlers) {}\n    }, {\n      key: 'unbindEvents',\n      value: function unbindEvents() {}\n    }, {\n      key: 'selectionStart',\n      get: function get$$1() {\n        var start = void 0;\n        try {\n          start = this._unsafeSelectionStart;\n        } catch (e) {}\n\n        return start != null ? start : this.value.length;\n      }\n    }, {\n      key: 'selectionEnd',\n      get: function get$$1() {\n        var end = void 0;\n        try {\n          end = this._unsafeSelectionEnd;\n        } catch (e) {}\n\n        return end != null ? end : this.value.length;\n      }\n    }]);\n    return MaskElement;\n  }();\n\n  var HTMLMaskElement = function (_MaskElement) {\n    inherits(HTMLMaskElement, _MaskElement);\n\n    function HTMLMaskElement(input) {\n      classCallCheck(this, HTMLMaskElement);\n\n      var _this = possibleConstructorReturn(this, (HTMLMaskElement.__proto__ || Object.getPrototypeOf(HTMLMaskElement)).call(this));\n\n      _this.input = input;\n      _this._handlers = {};\n      return _this;\n    }\n\n    createClass(HTMLMaskElement, [{\n      key: 'isActive',\n      value: function isActive() {\n        return this.input === document.activeElement;\n      }\n    }, {\n      key: '_unsafeSelect',\n      value: function _unsafeSelect(start, end) {\n        this.input.setSelectionRange(start, end);\n      }\n    }, {\n      key: 'bindEvents',\n      value: function bindEvents(handlers) {\n        var _this2 = this;\n\n        Object.keys(handlers).forEach(function (event) {\n          return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\n        });\n      }\n    }, {\n      key: 'unbindEvents',\n      value: function unbindEvents() {\n        var _this3 = this;\n\n        Object.keys(this._handlers).forEach(function (event) {\n          return _this3._toggleEventHandler(event);\n        });\n      }\n    }, {\n      key: '_toggleEventHandler',\n      value: function _toggleEventHandler(event, handler) {\n        if (this._handlers[event]) {\n          this.input.removeEventListener(event, this._handlers[event]);\n          delete this._handlers[event];\n        }\n\n        if (handler) {\n          this.input.addEventListener(event, handler);\n          this._handlers[event] = handler;\n        }\n      }\n    }, {\n      key: '_unsafeSelectionStart',\n      get: function get$$1() {\n        return this.input.selectionStart;\n      }\n    }, {\n      key: '_unsafeSelectionEnd',\n      get: function get$$1() {\n        return this.input.selectionEnd;\n      }\n    }, {\n      key: 'value',\n      get: function get$$1() {\n        return this.input.value;\n      },\n      set: function set$$1(value) {\n        this.input.value = value;\n      }\n    }]);\n    return HTMLMaskElement;\n  }(MaskElement);\n\n  HTMLMaskElement.EVENTS_MAP = {\n    selectionChange: 'keydown',\n    input: 'input',\n    drop: 'drop',\n    click: 'click',\n    focus: 'focus',\n    commit: 'change'\n  };\n\n  /** Listens to element events and controls changes between element and {@link Masked} */\n\n  var InputMask = function () {\n\n    /**\r\n      @param {MaskElement|HTMLInputElement|HTMLTextAreaElement} el\r\n      @param {Object} opts\r\n    */\n\n    /**\r\n      View element\r\n      @readonly\r\n    */\n    function InputMask(el, opts) {\n      classCallCheck(this, InputMask);\n\n      this.el = el instanceof MaskElement ? el : new HTMLMaskElement(el);\n      this.masked = createMask(opts);\n\n      this._listeners = {};\n      this._value = '';\n      this._unmaskedValue = '';\n\n      this._saveSelection = this._saveSelection.bind(this);\n      this._onInput = this._onInput.bind(this);\n      this._onChange = this._onChange.bind(this);\n      this._onDrop = this._onDrop.bind(this);\n      this.alignCursor = this.alignCursor.bind(this);\n      this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n\n      this._bindEvents();\n\n      // refresh\n      this.updateValue();\n      this._onChange();\n    }\n\n    /** Read or update mask */\n\n\n    /**\r\n      Internal {@link Masked} model\r\n      @readonly\r\n    */\n\n\n    createClass(InputMask, [{\n      key: '_bindEvents',\n\n\n      /**\r\n        Starts listening to element events\r\n        @protected\r\n      */\n      value: function _bindEvents() {\n        this.el.bindEvents({\n          selectionChange: this._saveSelection,\n          input: this._onInput,\n          drop: this._onDrop,\n          click: this.alignCursorFriendly,\n          focus: this.alignCursorFriendly,\n          commit: this._onChange\n        });\n      }\n\n      /**\r\n        Stops listening to element events\r\n        @protected\r\n       */\n\n    }, {\n      key: '_unbindEvents',\n      value: function _unbindEvents() {\n        this.el.unbindEvents();\n      }\n\n      /**\r\n        Fires custom event\r\n        @protected\r\n       */\n\n    }, {\n      key: '_fireEvent',\n      value: function _fireEvent(ev) {\n        var listeners = this._listeners[ev];\n        if (!listeners) return;\n\n        listeners.forEach(function (l) {\n          return l();\n        });\n      }\n\n      /**\r\n        Current selection start\r\n        @readonly\r\n      */\n\n    }, {\n      key: '_saveSelection',\n\n\n      /**\r\n        Stores current selection\r\n        @protected\r\n      */\n      value: function _saveSelection() /* ev */{\n        if (this.value !== this.el.value) {\n          console.warn('Uncontrolled input change, refresh mask manually!'); // eslint-disable-line no-console\n        }\n        this._selection = {\n          start: this.selectionStart,\n          end: this.cursorPos\n        };\n      }\n\n      /** Syncronizes model value from view */\n\n    }, {\n      key: 'updateValue',\n      value: function updateValue() {\n        this.masked.value = this.el.value;\n      }\n\n      /** Syncronizes view from model value, fires change events */\n\n    }, {\n      key: 'updateControl',\n      value: function updateControl() {\n        var newUnmaskedValue = this.masked.unmaskedValue;\n        var newValue = this.masked.value;\n        var isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\n\n        this._unmaskedValue = newUnmaskedValue;\n        this._value = newValue;\n\n        if (this.el.value !== newValue) this.el.value = newValue;\n        if (isChanged) this._fireChangeEvents();\n      }\n\n      /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\n\n    }, {\n      key: 'updateOptions',\n      value: function updateOptions(opts) {\n        opts = _extends({}, opts);\n\n        this.mask = opts.mask;\n        delete opts.mask;\n\n        // check if changed\n        if (objectIncludes(this.masked, opts)) return;\n\n        this.masked.updateOptions(opts);\n        this.updateControl();\n      }\n\n      /** Updates cursor */\n\n    }, {\n      key: 'updateCursor',\n      value: function updateCursor(cursorPos) {\n        if (cursorPos == null) return;\n        this.cursorPos = cursorPos;\n\n        // also queue change cursor for mobile browsers\n        this._delayUpdateCursor(cursorPos);\n      }\n\n      /**\r\n        Delays cursor update to support mobile browsers\r\n        @private\r\n      */\n\n    }, {\n      key: '_delayUpdateCursor',\n      value: function _delayUpdateCursor(cursorPos) {\n        var _this = this;\n\n        this._abortUpdateCursor();\n        this._changingCursorPos = cursorPos;\n        this._cursorChanging = setTimeout(function () {\n          if (!_this.el) return; // if was destroyed\n          _this.cursorPos = _this._changingCursorPos;\n          _this._abortUpdateCursor();\n        }, 10);\n      }\n\n      /**\r\n        Fires custom events\r\n        @protected\r\n      */\n\n    }, {\n      key: '_fireChangeEvents',\n      value: function _fireChangeEvents() {\n        this._fireEvent('accept');\n        if (this.masked.isComplete) this._fireEvent('complete');\n      }\n\n      /**\r\n        Aborts delayed cursor update\r\n        @private\r\n      */\n\n    }, {\n      key: '_abortUpdateCursor',\n      value: function _abortUpdateCursor() {\n        if (this._cursorChanging) {\n          clearTimeout(this._cursorChanging);\n          delete this._cursorChanging;\n        }\n      }\n\n      /** Aligns cursor to nearest available position */\n\n    }, {\n      key: 'alignCursor',\n      value: function alignCursor() {\n        this.cursorPos = this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT);\n      }\n\n      /** Aligns cursor only if selection is empty */\n\n    }, {\n      key: 'alignCursorFriendly',\n      value: function alignCursorFriendly() {\n        if (this.selectionStart !== this.cursorPos) return;\n        this.alignCursor();\n      }\n\n      /** Adds listener on custom event */\n\n    }, {\n      key: 'on',\n      value: function on(ev, handler) {\n        if (!this._listeners[ev]) this._listeners[ev] = [];\n        this._listeners[ev].push(handler);\n        return this;\n      }\n\n      /** Removes custom event listener */\n\n    }, {\n      key: 'off',\n      value: function off(ev, handler) {\n        if (!this._listeners[ev]) return;\n        if (!handler) {\n          delete this._listeners[ev];\n          return;\n        }\n        var hIndex = this._listeners[ev].indexOf(handler);\n        if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n        return this;\n      }\n\n      /** Handles view input event */\n\n    }, {\n      key: '_onInput',\n      value: function _onInput() {\n        this._abortUpdateCursor();\n\n        // fix strange IE behavior\n        if (!this._selection) return this.updateValue();\n\n        var details = new ActionDetails(\n        // new state\n        this.el.value, this.cursorPos,\n        // old state\n        this.value, this._selection);\n\n        var offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection).offset;\n\n        var cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, details.removeDirection);\n\n        this.updateControl();\n        this.updateCursor(cursorPos);\n      }\n\n      /** Handles view change event and commits model value */\n\n    }, {\n      key: '_onChange',\n      value: function _onChange() {\n        if (this.value !== this.el.value) {\n          this.updateValue();\n        }\n        this.masked.doCommit();\n        this.updateControl();\n      }\n\n      /** Handles view drop event, prevents by default */\n\n    }, {\n      key: '_onDrop',\n      value: function _onDrop(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n\n      /** Unbind view events and removes element reference */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this._unbindEvents();\n        // $FlowFixMe why not do so?\n        this._listeners.length = 0;\n        delete this.el;\n      }\n    }, {\n      key: 'mask',\n      get: function get$$1() {\n        return this.masked.mask;\n      },\n      set: function set$$1(mask) {\n        if (mask == null || mask === this.masked.mask || mask === Date && this.masked instanceof MaskedDate) return;\n\n        if (this.masked.constructor === maskedClass(mask)) {\n          this.masked.mask = mask;\n          return;\n        }\n\n        var masked = createMask({ mask: mask });\n        masked.unmaskedValue = this.masked.unmaskedValue;\n        this.masked = masked;\n      }\n\n      /** Raw value */\n\n    }, {\n      key: 'value',\n      get: function get$$1() {\n        return this._value;\n      },\n      set: function set$$1(str) {\n        this.masked.value = str;\n        this.updateControl();\n        this.alignCursor();\n      }\n\n      /** Unmasked value */\n\n    }, {\n      key: 'unmaskedValue',\n      get: function get$$1() {\n        return this._unmaskedValue;\n      },\n      set: function set$$1(str) {\n        this.masked.unmaskedValue = str;\n        this.updateControl();\n        this.alignCursor();\n      }\n\n      /** Typed unmasked value */\n\n    }, {\n      key: 'typedValue',\n      get: function get$$1() {\n        return this.masked.typedValue;\n      },\n      set: function set$$1(val) {\n        this.masked.typedValue = val;\n        this.updateControl();\n        this.alignCursor();\n      }\n    }, {\n      key: 'selectionStart',\n      get: function get$$1() {\n        return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n      }\n\n      /** Current cursor position */\n\n    }, {\n      key: 'cursorPos',\n      get: function get$$1() {\n        return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n      },\n      set: function set$$1(pos) {\n        if (!this.el.isActive) return;\n\n        this.el.select(pos, pos);\n        this._saveSelection();\n      }\n    }]);\n    return InputMask;\n  }();\n\n  /**\r\n    Number mask\r\n    @param {Object} opts\r\n    @param {string} opts.radix - Single char\r\n    @param {string} opts.thousandsSeparator - Single char\r\n    @param {Array<string>} opts.mapToRadix - Array of single chars\r\n    @param {number} opts.min\r\n    @param {number} opts.max\r\n    @param {number} opts.scale - Digits after point\r\n    @param {boolean} opts.signed - Allow negative\r\n    @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\r\n    @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\r\n  */\n  var MaskedNumber = function (_Masked) {\n    inherits(MaskedNumber, _Masked);\n\n    /** Flag to remove leading and trailing zeros in the end of editing */\n\n    /** Digits after point */\n\n    /** */\n\n    /** Single char */\n    function MaskedNumber(opts) {\n      classCallCheck(this, MaskedNumber);\n      return possibleConstructorReturn(this, (MaskedNumber.__proto__ || Object.getPrototypeOf(MaskedNumber)).call(this, _extends({}, MaskedNumber.DEFAULTS, opts)));\n    }\n\n    /**\r\n      @override\r\n    */\n\n    /** Flag to pad trailing zeros after point in the end of editing */\n\n    /** */\n\n    /** */\n\n    /** Array of single chars */\n\n\n    /** Single char */\n\n\n    createClass(MaskedNumber, [{\n      key: '_update',\n      value: function _update(opts) {\n        get(MaskedNumber.prototype.__proto__ || Object.getPrototypeOf(MaskedNumber.prototype), '_update', this).call(this, opts);\n        this._updateRegExps();\n      }\n\n      /** */\n\n    }, {\n      key: '_updateRegExps',\n      value: function _updateRegExps() {\n        // use different regexp to process user input (more strict, input suffix) and tail shifting\n        var start = '^';\n\n        var midInput = '';\n        var mid = '';\n        if (this.allowNegative) {\n          midInput += '([+|\\\\-]?|([+|\\\\-]?(0|([1-9]+\\\\d*))))';\n          mid += '[+|\\\\-]?';\n        } else {\n          midInput += '(0|([1-9]+\\\\d*))';\n        }\n        mid += '\\\\d*';\n\n        var end = (this.scale ? '(' + this.radix + '\\\\d{0,' + this.scale + '})?' : '') + '$';\n\n        this._numberRegExpInput = new RegExp(start + midInput + end);\n        this._numberRegExp = new RegExp(start + mid + end);\n        this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\n        this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: '_extractTail',\n      value: function _extractTail() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        var tail = get(MaskedNumber.prototype.__proto__ || Object.getPrototypeOf(MaskedNumber.prototype), '_extractTail', this).call(this, fromPos, toPos);\n\n        return _extends({}, tail, {\n          value: this._removeThousandsSeparators(tail.value)\n        });\n      }\n\n      /** */\n\n    }, {\n      key: '_removeThousandsSeparators',\n      value: function _removeThousandsSeparators(value) {\n        return value.replace(this._thousandsSeparatorRegExp, '');\n      }\n\n      /** */\n\n    }, {\n      key: '_insertThousandsSeparators',\n      value: function _insertThousandsSeparators(value) {\n        // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n        var parts = value.split(this.radix);\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n        return parts.join(this.radix);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'doPrepare',\n      value: function doPrepare(str) {\n        var _babelHelpers$get;\n\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return (_babelHelpers$get = get(MaskedNumber.prototype.__proto__ || Object.getPrototypeOf(MaskedNumber.prototype), 'doPrepare', this)).call.apply(_babelHelpers$get, [this, this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix))].concat(toConsumableArray(args)));\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'appendWithTail',\n      value: function appendWithTail() {\n        var _babelHelpers$get2;\n\n        var previousValue = this.value;\n        this._value = this._removeThousandsSeparators(this.value);\n        var startChangePos = this.value.length;\n\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        var appendDetails = (_babelHelpers$get2 = get(MaskedNumber.prototype.__proto__ || Object.getPrototypeOf(MaskedNumber.prototype), 'appendWithTail', this)).call.apply(_babelHelpers$get2, [this].concat(toConsumableArray(args)));\n        this._value = this._insertThousandsSeparators(this.value);\n\n        // calculate offsets after insert separators\n        var beforeTailPos = startChangePos + appendDetails.inserted.length;\n        for (var pos = 0; pos <= beforeTailPos; ++pos) {\n          if (this.value[pos] === this.thousandsSeparator) {\n            if (pos < startChangePos ||\n            // check high bound\n            // if separator is still there - consider it also\n            pos === startChangePos && previousValue[pos] === this.thousandsSeparator) {\n              ++startChangePos;\n            }\n            if (pos < beforeTailPos) ++beforeTailPos;\n          }\n        }\n\n        // adjust details with separators\n        appendDetails.rawInserted = appendDetails.inserted;\n        appendDetails.inserted = this.value.slice(startChangePos, beforeTailPos);\n        appendDetails.shift += startChangePos - previousValue.length;\n\n        return appendDetails;\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'nearestInputPos',\n      value: function nearestInputPos(cursorPos, direction) {\n        if (!direction) return cursorPos;\n\n        var nextPos = indexInDirection(cursorPos, direction);\n        if (this.value[nextPos] === this.thousandsSeparator) cursorPos += direction;\n        return cursorPos;\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'doValidate',\n      value: function doValidate(flags) {\n        var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp;\n\n        // validate as string\n        var valid = regexp.test(this._removeThousandsSeparators(this.value));\n\n        if (valid) {\n          // validate as number\n          var number = this.number;\n          valid = valid && !isNaN(number) && (\n          // check min bound for negative values\n          this.min == null || this.min >= 0 || this.min <= this.number) && (\n          // check max bound for positive values\n          this.max == null || this.max <= 0 || this.number <= this.max);\n        }\n\n        return valid && get(MaskedNumber.prototype.__proto__ || Object.getPrototypeOf(MaskedNumber.prototype), 'doValidate', this).call(this, flags);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'doCommit',\n      value: function doCommit() {\n        var number = this.number;\n        var validnum = number;\n\n        // check bounds\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n\n        if (validnum !== number) this.unmaskedValue = String(validnum);\n\n        var formatted = this.value;\n\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\n\n        this._value = this._insertThousandsSeparators(formatted);\n        get(MaskedNumber.prototype.__proto__ || Object.getPrototypeOf(MaskedNumber.prototype), 'doCommit', this).call(this);\n      }\n\n      /** */\n\n    }, {\n      key: '_normalizeZeros',\n      value: function _normalizeZeros(value) {\n        var parts = this._removeThousandsSeparators(value).split(this.radix);\n\n        // remove leading zeros\n        parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n          return sign + num;\n        });\n        // add leading zero\n        if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n        if (parts.length > 1) {\n          parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n          if (!parts[1].length) parts.length = 1; // remove fractional\n        }\n\n        return this._insertThousandsSeparators(parts.join(this.radix));\n      }\n\n      /** */\n\n    }, {\n      key: '_padFractionalZeros',\n      value: function _padFractionalZeros(value) {\n        if (!value) return value;\n\n        var parts = value.split(this.radix);\n        if (parts.length < 2) parts.push('');\n        parts[1] = parts[1].padEnd(this.scale, '0');\n        return parts.join(this.radix);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'unmaskedValue',\n      get: function get$$1() {\n        return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\n      },\n      set: function set$$1(unmaskedValue) {\n        set(MaskedNumber.prototype.__proto__ || Object.getPrototypeOf(MaskedNumber.prototype), 'unmaskedValue', unmaskedValue.replace('.', this.radix), this);\n      }\n\n      /** Parsed Number */\n\n    }, {\n      key: 'number',\n      get: function get$$1() {\n        return Number(this.unmaskedValue);\n      },\n      set: function set$$1(number) {\n        this.unmaskedValue = String(number);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'typedValue',\n      get: function get$$1() {\n        return this.number;\n      },\n      set: function set$$1(value) {\n        this.number = value;\n      }\n\n      /**\r\n        Is negative allowed\r\n        @readonly\r\n      */\n\n    }, {\n      key: 'allowNegative',\n      get: function get$$1() {\n        return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n      }\n    }]);\n    return MaskedNumber;\n  }(Masked);\n\n  MaskedNumber.DEFAULTS = {\n    radix: ',',\n    thousandsSeparator: '',\n    mapToRadix: ['.'],\n    scale: 2,\n    signed: false,\n    normalizeZeros: true,\n    padFractionalZeros: false\n  };\n\n  /** Masking by RegExp */\n\n  var MaskedRegExp = function (_Masked) {\n    inherits(MaskedRegExp, _Masked);\n\n    function MaskedRegExp() {\n      classCallCheck(this, MaskedRegExp);\n      return possibleConstructorReturn(this, (MaskedRegExp.__proto__ || Object.getPrototypeOf(MaskedRegExp)).apply(this, arguments));\n    }\n\n    createClass(MaskedRegExp, [{\n      key: '_update',\n\n      /**\r\n        @override\r\n        @param {Object} opts\r\n      */\n      value: function _update(opts) {\n        opts.validate = function (value) {\n          return value.search(opts.mask) >= 0;\n        };\n        get(MaskedRegExp.prototype.__proto__ || Object.getPrototypeOf(MaskedRegExp.prototype), '_update', this).call(this, opts);\n      }\n    }]);\n    return MaskedRegExp;\n  }(Masked);\n\n  /** Masking by custom Function */\n\n  var MaskedFunction = function (_Masked) {\n    inherits(MaskedFunction, _Masked);\n\n    function MaskedFunction() {\n      classCallCheck(this, MaskedFunction);\n      return possibleConstructorReturn(this, (MaskedFunction.__proto__ || Object.getPrototypeOf(MaskedFunction)).apply(this, arguments));\n    }\n\n    createClass(MaskedFunction, [{\n      key: '_update',\n\n      /**\r\n        @override\r\n        @param {Object} opts\r\n      */\n      value: function _update(opts) {\n        opts.validate = opts.mask;\n        get(MaskedFunction.prototype.__proto__ || Object.getPrototypeOf(MaskedFunction.prototype), '_update', this).call(this, opts);\n      }\n    }]);\n    return MaskedFunction;\n  }(Masked);\n\n  /** Dynamic mask for choosing apropriate mask in run-time */\n  var MaskedDynamic = function (_Masked) {\n    inherits(MaskedDynamic, _Masked);\n\n    /**\r\n      @param {Object} opts\r\n    */\n\n    /** Compliled {@link Masked} options */\n    function MaskedDynamic(opts) {\n      classCallCheck(this, MaskedDynamic);\n\n      var _this = possibleConstructorReturn(this, (MaskedDynamic.__proto__ || Object.getPrototypeOf(MaskedDynamic)).call(this, _extends({}, MaskedDynamic.DEFAULTS, opts)));\n\n      _this.currentMask = null;\n      return _this;\n    }\n\n    /**\r\n      @override\r\n    */\n\n    /** Chooses {@link Masked} depending on input value */\n\n    /** Currently chosen mask */\n\n\n    createClass(MaskedDynamic, [{\n      key: '_update',\n      value: function _update(opts) {\n        get(MaskedDynamic.prototype.__proto__ || Object.getPrototypeOf(MaskedDynamic.prototype), '_update', this).call(this, opts);\n        // mask could be totally dynamic with only `dispatch` option\n        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {\n          return createMask(m);\n        }) : [];\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: '_append',\n      value: function _append(str) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        str = this.doPrepare.apply(this, [str].concat(toConsumableArray(args)));\n\n        var details = this._applyDispatch.apply(this, [str].concat(toConsumableArray(args)));\n\n        if (this.currentMask) {\n          var _currentMask;\n\n          details.aggregate((_currentMask = this.currentMask)._append.apply(_currentMask, [str].concat(toConsumableArray(args))));\n        }\n\n        return details;\n      }\n    }, {\n      key: '_applyDispatch',\n      value: function _applyDispatch() {\n        var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n        var oldValueLength = this.value.length;\n        var inputValue = this.rawInputValue;\n        var oldMask = this.currentMask;\n        var details = new ChangeDetails();\n\n        // dispatch SHOULD NOT modify mask\n\n        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        this.currentMask = this.doDispatch.apply(this, [appended].concat(toConsumableArray(args)));\n\n        // restore state after dispatch\n        if (this.currentMask && this.currentMask !== oldMask) {\n          // if mask changed reapply input\n          this.currentMask.reset();\n          // $FlowFixMe - it's ok, we don't change current mask\n          this.currentMask._append(inputValue, { raw: true });\n          details.shift = this.value.length - oldValueLength;\n        }\n\n        return details;\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'doDispatch',\n      value: function doDispatch(appended) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return this.dispatch(appended, this, flags);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'clone',\n      value: function clone() {\n        var m = new MaskedDynamic(this);\n        m._value = this.value;\n\n        // try to keep reference to compiled masks\n        var currentMaskIndex = this.compiledMasks.indexOf(this.currentMask);\n        if (this.currentMask) {\n          m.currentMask = currentMaskIndex >= 0 ? m.compiledMasks[currentMaskIndex].assign(this.currentMask) : this.currentMask.clone();\n        }\n\n        return m;\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'reset',\n      value: function reset() {\n        if (this.currentMask) this.currentMask.reset();\n        this.compiledMasks.forEach(function (cm) {\n          return cm.reset();\n        });\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'remove',\n\n\n      /**\r\n        @override\r\n      */\n      value: function remove() {\n        var details = new ChangeDetails();\n        if (this.currentMask) {\n          var _currentMask2;\n\n          details.aggregate((_currentMask2 = this.currentMask).remove.apply(_currentMask2, arguments))\n          // update with dispatch\n          .aggregate(this._applyDispatch());\n        }\n\n        return details;\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'extractInput',\n      value: function extractInput() {\n        var _currentMask3;\n\n        return this.currentMask ? (_currentMask3 = this.currentMask).extractInput.apply(_currentMask3, arguments) : '';\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: '_extractTail',\n      value: function _extractTail() {\n        var _currentMask4, _babelHelpers$get;\n\n        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return this.currentMask ? (_currentMask4 = this.currentMask)._extractTail.apply(_currentMask4, toConsumableArray(args)) : (_babelHelpers$get = get(MaskedDynamic.prototype.__proto__ || Object.getPrototypeOf(MaskedDynamic.prototype), '_extractTail', this)).call.apply(_babelHelpers$get, [this].concat(toConsumableArray(args)));\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: '_appendTail',\n      value: function _appendTail(tail) {\n        var details = new ChangeDetails();\n        if (tail) details.aggregate(this._applyDispatch(tail.value));\n\n        return details.aggregate(this.currentMask ? this.currentMask._appendTail(tail) : get(MaskedDynamic.prototype.__proto__ || Object.getPrototypeOf(MaskedDynamic.prototype), '_appendTail', this).call(this, tail));\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'doCommit',\n      value: function doCommit() {\n        if (this.currentMask) this.currentMask.doCommit();\n        get(MaskedDynamic.prototype.__proto__ || Object.getPrototypeOf(MaskedDynamic.prototype), 'doCommit', this).call(this);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'nearestInputPos',\n      value: function nearestInputPos() {\n        var _currentMask5, _babelHelpers$get2;\n\n        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        return this.currentMask ? (_currentMask5 = this.currentMask).nearestInputPos.apply(_currentMask5, toConsumableArray(args)) : (_babelHelpers$get2 = get(MaskedDynamic.prototype.__proto__ || Object.getPrototypeOf(MaskedDynamic.prototype), 'nearestInputPos', this)).call.apply(_babelHelpers$get2, [this].concat(toConsumableArray(args)));\n      }\n    }, {\n      key: 'value',\n      get: function get$$1() {\n        return this.currentMask ? this.currentMask.value : '';\n      },\n      set: function set$$1(value) {\n        set(MaskedDynamic.prototype.__proto__ || Object.getPrototypeOf(MaskedDynamic.prototype), 'value', value, this);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'unmaskedValue',\n      get: function get$$1() {\n        return this.currentMask ? this.currentMask.unmaskedValue : '';\n      },\n      set: function set$$1(unmaskedValue) {\n        set(MaskedDynamic.prototype.__proto__ || Object.getPrototypeOf(MaskedDynamic.prototype), 'unmaskedValue', unmaskedValue, this);\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'typedValue',\n      get: function get$$1() {\n        return this.currentMask ? this.currentMask.typedValue : '';\n      },\n      set: function set$$1(value) {\n        var unmaskedValue = String(value);\n        if (this.currentMask) {\n          this.currentMask.typedValue = value;\n          unmaskedValue = this.currentMask.unmaskedValue;\n        }\n        this.unmaskedValue = unmaskedValue;\n      }\n\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: 'isComplete',\n      get: function get$$1() {\n        return !!this.currentMask && this.currentMask.isComplete;\n      }\n    }]);\n    return MaskedDynamic;\n  }(Masked);\n\n\n  MaskedDynamic.DEFAULTS = {\n    dispatch: function dispatch(appended, masked, flags) {\n      if (!masked.compiledMasks.length) return;\n\n      var inputValue = masked.rawInputValue;\n\n      // simulate input\n      var inputs = masked.compiledMasks.map(function (cm, index) {\n        var m = cm.clone();\n        m.rawInputValue = inputValue;\n        m._append(appended, flags);\n\n        return { value: m.rawInputValue.length, index: index };\n      });\n\n      // pop masks with longer values first\n      inputs.sort(function (i1, i2) {\n        return i2.value - i1.value;\n      });\n\n      return masked.compiledMasks[inputs[0].index];\n    }\n  };\n\n  /**\r\n   * Applies mask on element.\r\n   * @constructor\r\n   * @param {HTMLInputElement|HTMLTextAreaElement|MaskElement} el - Element to apply mask\r\n   * @param {Object} opts - Custom mask options\r\n   * @return {InputMask}\r\n   */\n  function IMask(el) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // currently available only for input-like elements\n    return new InputMask(el, opts);\n  }\n\n  /** {@link InputMask} */\n  IMask.InputMask = InputMask;\n\n  /** {@link Masked} */\n  IMask.Masked = Masked;\n  /** {@link MaskedPattern} */\n  IMask.MaskedPattern = MaskedPattern;\n  /** {@link MaskedNumber} */\n  IMask.MaskedNumber = MaskedNumber;\n  /** {@link MaskedDate} */\n  IMask.MaskedDate = MaskedDate;\n  /** {@link MaskedRegExp} */\n  IMask.MaskedRegExp = MaskedRegExp;\n  /** {@link MaskedFunction} */\n  IMask.MaskedFunction = MaskedFunction;\n  /** {@link MaskedDynamic} */\n  IMask.MaskedDynamic = MaskedDynamic;\n  /** {@link createMask} */\n  IMask.createMask = createMask;\n  /** {@link MaskElement} */\n  IMask.MaskElement = MaskElement;\n  /** {@link HTMLMaskElement} */\n  IMask.HTMLMaskElement = HTMLMaskElement;\n\n  g.IMask = IMask;\n\n  return IMask;\n\n})));\n//# sourceMappingURL=imask.js.map\n\n\n//# sourceURL=webpack:///../node_modules/imask/dist/imask.js?");

/***/ })

};;